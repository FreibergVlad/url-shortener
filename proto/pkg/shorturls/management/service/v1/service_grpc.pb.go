// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: shorturls/management/service/v1/service.proto

package servicev1

import (
	context "context"
	v1 "github.com/FreibergVlad/url-shortener/proto/pkg/shorturls/management/messages/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortURLManagementService_GetShortURL_FullMethodName                    = "/shorturls.management.service.v1.ShortURLManagementService/GetShortURL"
	ShortURLManagementService_GetShortURLByOrganizationID_FullMethodName    = "/shorturls.management.service.v1.ShortURLManagementService/GetShortURLByOrganizationID"
	ShortURLManagementService_ListShortURLByOrganizationID_FullMethodName   = "/shorturls.management.service.v1.ShortURLManagementService/ListShortURLByOrganizationID"
	ShortURLManagementService_UpdateShortURLByOrganizationID_FullMethodName = "/shorturls.management.service.v1.ShortURLManagementService/UpdateShortURLByOrganizationID"
	ShortURLManagementService_DeleteShortURLByOrganizationID_FullMethodName = "/shorturls.management.service.v1.ShortURLManagementService/DeleteShortURLByOrganizationID"
)

// ShortURLManagementServiceClient is the client API for ShortURLManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortURLManagementServiceClient interface {
	GetShortURL(ctx context.Context, in *v1.GetShortURLRequest, opts ...grpc.CallOption) (*v1.GetShortURLResponse, error)
	GetShortURLByOrganizationID(ctx context.Context, in *v1.GetShortURLByOrganizationIDRequest, opts ...grpc.CallOption) (*v1.GetShortURLByOrganizationIDResponse, error)
	ListShortURLByOrganizationID(ctx context.Context, in *v1.ListShortURLByOrganizationIDRequest, opts ...grpc.CallOption) (*v1.ListShortURLByOrganizationIDResponse, error)
	UpdateShortURLByOrganizationID(ctx context.Context, in *v1.UpdateShortURLByOrganizationIDRequest, opts ...grpc.CallOption) (*v1.UpdateShortURLByOrganizationIDResponse, error)
	DeleteShortURLByOrganizationID(ctx context.Context, in *v1.DeleteShortURLByOrganizationIDRequest, opts ...grpc.CallOption) (*v1.DeleteShortURLByOrganizationIDResponse, error)
}

type shortURLManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortURLManagementServiceClient(cc grpc.ClientConnInterface) ShortURLManagementServiceClient {
	return &shortURLManagementServiceClient{cc}
}

func (c *shortURLManagementServiceClient) GetShortURL(ctx context.Context, in *v1.GetShortURLRequest, opts ...grpc.CallOption) (*v1.GetShortURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetShortURLResponse)
	err := c.cc.Invoke(ctx, ShortURLManagementService_GetShortURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLManagementServiceClient) GetShortURLByOrganizationID(ctx context.Context, in *v1.GetShortURLByOrganizationIDRequest, opts ...grpc.CallOption) (*v1.GetShortURLByOrganizationIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetShortURLByOrganizationIDResponse)
	err := c.cc.Invoke(ctx, ShortURLManagementService_GetShortURLByOrganizationID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLManagementServiceClient) ListShortURLByOrganizationID(ctx context.Context, in *v1.ListShortURLByOrganizationIDRequest, opts ...grpc.CallOption) (*v1.ListShortURLByOrganizationIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListShortURLByOrganizationIDResponse)
	err := c.cc.Invoke(ctx, ShortURLManagementService_ListShortURLByOrganizationID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLManagementServiceClient) UpdateShortURLByOrganizationID(ctx context.Context, in *v1.UpdateShortURLByOrganizationIDRequest, opts ...grpc.CallOption) (*v1.UpdateShortURLByOrganizationIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateShortURLByOrganizationIDResponse)
	err := c.cc.Invoke(ctx, ShortURLManagementService_UpdateShortURLByOrganizationID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLManagementServiceClient) DeleteShortURLByOrganizationID(ctx context.Context, in *v1.DeleteShortURLByOrganizationIDRequest, opts ...grpc.CallOption) (*v1.DeleteShortURLByOrganizationIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteShortURLByOrganizationIDResponse)
	err := c.cc.Invoke(ctx, ShortURLManagementService_DeleteShortURLByOrganizationID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortURLManagementServiceServer is the server API for ShortURLManagementService service.
// All implementations must embed UnimplementedShortURLManagementServiceServer
// for forward compatibility.
type ShortURLManagementServiceServer interface {
	GetShortURL(context.Context, *v1.GetShortURLRequest) (*v1.GetShortURLResponse, error)
	GetShortURLByOrganizationID(context.Context, *v1.GetShortURLByOrganizationIDRequest) (*v1.GetShortURLByOrganizationIDResponse, error)
	ListShortURLByOrganizationID(context.Context, *v1.ListShortURLByOrganizationIDRequest) (*v1.ListShortURLByOrganizationIDResponse, error)
	UpdateShortURLByOrganizationID(context.Context, *v1.UpdateShortURLByOrganizationIDRequest) (*v1.UpdateShortURLByOrganizationIDResponse, error)
	DeleteShortURLByOrganizationID(context.Context, *v1.DeleteShortURLByOrganizationIDRequest) (*v1.DeleteShortURLByOrganizationIDResponse, error)
	mustEmbedUnimplementedShortURLManagementServiceServer()
}

// UnimplementedShortURLManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortURLManagementServiceServer struct{}

func (UnimplementedShortURLManagementServiceServer) GetShortURL(context.Context, *v1.GetShortURLRequest) (*v1.GetShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURL not implemented")
}
func (UnimplementedShortURLManagementServiceServer) GetShortURLByOrganizationID(context.Context, *v1.GetShortURLByOrganizationIDRequest) (*v1.GetShortURLByOrganizationIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURLByOrganizationID not implemented")
}
func (UnimplementedShortURLManagementServiceServer) ListShortURLByOrganizationID(context.Context, *v1.ListShortURLByOrganizationIDRequest) (*v1.ListShortURLByOrganizationIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShortURLByOrganizationID not implemented")
}
func (UnimplementedShortURLManagementServiceServer) UpdateShortURLByOrganizationID(context.Context, *v1.UpdateShortURLByOrganizationIDRequest) (*v1.UpdateShortURLByOrganizationIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShortURLByOrganizationID not implemented")
}
func (UnimplementedShortURLManagementServiceServer) DeleteShortURLByOrganizationID(context.Context, *v1.DeleteShortURLByOrganizationIDRequest) (*v1.DeleteShortURLByOrganizationIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortURLByOrganizationID not implemented")
}
func (UnimplementedShortURLManagementServiceServer) mustEmbedUnimplementedShortURLManagementServiceServer() {
}
func (UnimplementedShortURLManagementServiceServer) testEmbeddedByValue() {}

// UnsafeShortURLManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortURLManagementServiceServer will
// result in compilation errors.
type UnsafeShortURLManagementServiceServer interface {
	mustEmbedUnimplementedShortURLManagementServiceServer()
}

func RegisterShortURLManagementServiceServer(s grpc.ServiceRegistrar, srv ShortURLManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedShortURLManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortURLManagementService_ServiceDesc, srv)
}

func _ShortURLManagementService_GetShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLManagementServiceServer).GetShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLManagementService_GetShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLManagementServiceServer).GetShortURL(ctx, req.(*v1.GetShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLManagementService_GetShortURLByOrganizationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetShortURLByOrganizationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLManagementServiceServer).GetShortURLByOrganizationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLManagementService_GetShortURLByOrganizationID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLManagementServiceServer).GetShortURLByOrganizationID(ctx, req.(*v1.GetShortURLByOrganizationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLManagementService_ListShortURLByOrganizationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListShortURLByOrganizationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLManagementServiceServer).ListShortURLByOrganizationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLManagementService_ListShortURLByOrganizationID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLManagementServiceServer).ListShortURLByOrganizationID(ctx, req.(*v1.ListShortURLByOrganizationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLManagementService_UpdateShortURLByOrganizationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateShortURLByOrganizationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLManagementServiceServer).UpdateShortURLByOrganizationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLManagementService_UpdateShortURLByOrganizationID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLManagementServiceServer).UpdateShortURLByOrganizationID(ctx, req.(*v1.UpdateShortURLByOrganizationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLManagementService_DeleteShortURLByOrganizationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteShortURLByOrganizationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLManagementServiceServer).DeleteShortURLByOrganizationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLManagementService_DeleteShortURLByOrganizationID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLManagementServiceServer).DeleteShortURLByOrganizationID(ctx, req.(*v1.DeleteShortURLByOrganizationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortURLManagementService_ServiceDesc is the grpc.ServiceDesc for ShortURLManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortURLManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shorturls.management.service.v1.ShortURLManagementService",
	HandlerType: (*ShortURLManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortURL",
			Handler:    _ShortURLManagementService_GetShortURL_Handler,
		},
		{
			MethodName: "GetShortURLByOrganizationID",
			Handler:    _ShortURLManagementService_GetShortURLByOrganizationID_Handler,
		},
		{
			MethodName: "ListShortURLByOrganizationID",
			Handler:    _ShortURLManagementService_ListShortURLByOrganizationID_Handler,
		},
		{
			MethodName: "UpdateShortURLByOrganizationID",
			Handler:    _ShortURLManagementService_UpdateShortURLByOrganizationID_Handler,
		},
		{
			MethodName: "DeleteShortURLByOrganizationID",
			Handler:    _ShortURLManagementService_DeleteShortURLByOrganizationID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shorturls/management/service/v1/service.proto",
}
