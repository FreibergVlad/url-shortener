// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id,
    password_hash,
    email,
    full_name,
    role_id,
    created_at

) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type CreateUserParams struct {
	ID           pgtype.UUID
	PasswordHash string
	Email        string
	FullName     string
	RoleID       string
	CreatedAt    pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.PasswordHash,
		arg.Email,
		arg.FullName,
		arg.RoleID,
		arg.CreatedAt,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password_hash, email, full_name, role_id, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.Email,
		&i.FullName,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, password_hash, email, full_name, role_id, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.Email,
		&i.FullName,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}
