// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrganization = `-- name: CreateOrganization :exec
INSERT INTO organizations (
    id,
    name,
    slug,
    created_at,
    created_by

) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type CreateOrganizationParams struct {
	ID        pgtype.UUID
	Name      string
	Slug      string
	CreatedAt pgtype.Timestamptz
	CreatedBy pgtype.UUID
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) error {
	_, err := q.db.Exec(ctx, createOrganization,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	return err
}

const createOrganizationMembership = `-- name: CreateOrganizationMembership :exec
INSERT INTO users_organizations (
    organization_id,
    user_id,
    role_id,
    created_at
) VALUES (
    $1,
    $2,
    $3,
    $4
)
`

type CreateOrganizationMembershipParams struct {
	OrganizationID pgtype.UUID
	UserID         pgtype.UUID
	RoleID         string
	CreatedAt      pgtype.Timestamptz
}

func (q *Queries) CreateOrganizationMembership(ctx context.Context, arg CreateOrganizationMembershipParams) error {
	_, err := q.db.Exec(ctx, createOrganizationMembership,
		arg.OrganizationID,
		arg.UserID,
		arg.RoleID,
		arg.CreatedAt,
	)
	return err
}

const listOrganizationMembershipsByUserId = `-- name: ListOrganizationMembershipsByUserId :many
SELECT
    uo.organization_id AS organization_id,
    o.slug AS organization_slug,
    uo.role_id AS role_id,
    uo.created_at AS created_at
FROM
    users_organizations uo
JOIN
    organizations o ON o.id = uo.organization_id
WHERE
    uo.user_id = $1
ORDER BY
    uo.created_at DESC
`

type ListOrganizationMembershipsByUserIdRow struct {
	OrganizationID   pgtype.UUID
	OrganizationSlug string
	RoleID           string
	CreatedAt        pgtype.Timestamptz
}

func (q *Queries) ListOrganizationMembershipsByUserId(ctx context.Context, userID pgtype.UUID) ([]ListOrganizationMembershipsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, listOrganizationMembershipsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOrganizationMembershipsByUserIdRow{}
	for rows.Next() {
		var i ListOrganizationMembershipsByUserIdRow
		if err := rows.Scan(
			&i.OrganizationID,
			&i.OrganizationSlug,
			&i.RoleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
