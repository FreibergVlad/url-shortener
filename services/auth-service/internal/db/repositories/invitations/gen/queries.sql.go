// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvitation = `-- name: CreateInvitation :exec
INSERT INTO invitations (
    id,
    status,
    organization_id,
    email,
    role_id,
    created_at,
    expires_at,
    created_by

) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
`

type CreateInvitationParams struct {
	ID             pgtype.UUID
	Status         string
	OrganizationID pgtype.UUID
	Email          string
	RoleID         string
	CreatedAt      pgtype.Timestamptz
	ExpiresAt      pgtype.Timestamptz
	CreatedBy      pgtype.UUID
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) error {
	_, err := q.db.Exec(ctx, createInvitation,
		arg.ID,
		arg.Status,
		arg.OrganizationID,
		arg.Email,
		arg.RoleID,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.CreatedBy,
	)
	return err
}

const getInvitationById = `-- name: GetInvitationById :one
SELECT id, status, organization_id, email, role_id, created_at, expires_at, created_by FROM invitations WHERE id = $1
`

func (q *Queries) GetInvitationById(ctx context.Context, id pgtype.UUID) (Invitation, error) {
	row := q.db.QueryRow(ctx, getInvitationById, id)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.OrganizationID,
		&i.Email,
		&i.RoleID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.CreatedBy,
	)
	return i, err
}

const updateInvitationStatusById = `-- name: UpdateInvitationStatusById :exec
UPDATE invitations SET status = $1 WHERE id = $2
`

type UpdateInvitationStatusByIdParams struct {
	Status string
	ID     pgtype.UUID
}

func (q *Queries) UpdateInvitationStatusById(ctx context.Context, arg UpdateInvitationStatusByIdParams) error {
	_, err := q.db.Exec(ctx, updateInvitationStatusById, arg.Status, arg.ID)
	return err
}
