run:
  timeout: 1m
  issues-exit-code: 1
  tests: true
  modules-download-mode: readonly

issues:
  max-issues-per-linter: 0
  max-same-issues: 0

linters:
  enable:
    - errcheck # Errcheck is a program for checking for unchecked errors in Go code.
    - gosimple # Linter for Go source code that specializes in simplifying code.
    - govet # Vet examines Go source code and reports suspicious constructs.
    - ineffassign # Detects when assignments to existing variables are not used.
    - staticcheck # Set of rules from 'staticcheck'.
    - unused # Checks Go code for unused constants, variables, functions and types.
    - asasalint # Check for pass []any as any in variadic func(...any).
    - asciicheck # Checks that all code identifiers does not have non-ASCII symbols in the name.
    - bidichk # Checks for dangerous unicode character sequences.
    - bodyclose # Checks whether HTTP response body is closed successfully.
    - canonicalheader # Canonicalheader checks whether net/http.Header uses canonical header.
    - containedctx # Containedctx is a linter that detects struct contained context.Context field.
    - contextcheck # Check whether the function uses a non-inherited context.
    - copyloopvar # Copyloopvar is a linter detects places where loop variables are copied.
    - decorder # Check declaration order and count of types, constants, variables and functions.
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()). [fast]
    - dupl # Tool for code clone detection.
    - dupword # Checks for duplicate words in the source code.
    - durationcheck # Check for two durations multiplied together.
    - err113 # Go linter to check the errors handling expressions.
    - errchkjson # Checks types passed to the json encoding functions. Reports unsupported types and reports occurrences where the check for the returned error can be omitted.
    - errname # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.
    - errorlint # Errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13. [auto-fix]
    - exhaustive # Check exhaustiveness of enum switch statements.
    - exptostd # Detects functions from golang.org/x/exp/ that can be replaced by std functions.
    - fatcontext # Detects nested contexts in loops and function literals.
    - gci # Checks if code and import statements are formatted, it makes import statements always deterministic.
    - gochecksumtype # Run exhaustiveness checks on Go "sum types".
    - goconst # Finds repeated strings that could be replaced by a constant.
    - gocritic # Provides diagnostics that check for bugs, performance and style issues.
    - godot # Check if comments end in a period.
    - gofmt # Checks if the code is formatted according to 'gofmt' command.
    - gofumpt # Checks if code and import statements are formatted, with additional rules.
    - goheader # Checks if file header matches to pattern.
    - goimports # Checks if the code and import statements are formatted according to the 'goimports' command.
    - gosec # Inspects source code for security problems.
    - gosmopolitan # Report certain i18n/l10n anti-patterns in your Go codebase.
    - grouper # Analyze expression groups.
    - iface # Detect the incorrect use of interfaces, helping developers avoid interface pollution.
    - importas # Enforces consistent import aliases.
    - inamedparam # Reports interfaces with unnamed method parameters.
    - interfacebloat # A linter that checks the number of methods inside an interface.
    - intrange # Intrange is a linter to find places where for loops could make use of an integer range.
    - ireturn # Accept Interfaces, Return Concrete Types.
    - lll # Reports long lines.
    - loggercheck # Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).
    - maintidx # Maintidx measures the maintainability index of each function.
    - makezero # Finds slice declarations with non-zero initial length.
    - mirror # Reports wrong mirror patterns of bytes/strings usage.
    - misspell # Finds commonly misspelled English words.
    - mnd # An analyzer to detect magic numbers.
    - musttag # Enforce field tags in (un)marshaled structs.
    - nakedret # Checks that functions with naked returns are not longer than a maximum size (can be zero). [fast, auto-fix]
    - nestif # Reports deeply nested if statements.
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil.
    - nilnesserr # This linter reports that it checks for err != nil, but it returns a different nil value error.
    - nilnil # Checks that there is no simultaneous return of `nil` error and an invalid value.
    - noctx # Finds sending http request without context.Context.
    - nonamedreturns # Reports all named returns.
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL.
    - paralleltest # Detects missing usage of t.Parallel() method in your Go test.
    - prealloc # Finds slice declarations that could potentially be pre-allocated.
    - predeclared # Find code that shadows one of Go's predeclared identifiers.
    - reassign # Checks that package variables are not reassigned.
    - recvcheck # Checks for receiver type consistency.
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - rowserrcheck # Checks whether Rows.Err of rows is checked successfully.
    - sqlclosecheck # Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed.
    - testifylint # Checks usage of github.com/stretchr/testify.
    - testpackage # Linter that makes you use a separate _test package.
    - thelper # Thelper detects tests helpers which is not start with t.Helper() method.
    - tparallel # Tparallel detects inappropriate usage of t.Parallel() method in your Go test codes.
    - typecheck # Detects type errors (like wrong type assertions).
    - unconvert # Remove unnecessary type conversions.
    - unparam # Reports unused function parameters.
    - usestdlibvars # A linter that detect the possibility to use variables/constants from the Go standard library.
    - usetesting # Reports uses of functions with replacement inside the testing package.
    - varnamelen # Checks that the length of a variable's name matches its scope.
    - wastedassign # Finds wasted assignment statements.
    - whitespace # Whitespace is a linter that checks for unnecessary newlines at the start and end of functions, if, for, etc.
    - zerologlint # Detects the wrong usage of zerolog
    # disabled linters:
    # - cyclop # Checks for functions with high cyclomatic complexity.
    # - depguard # Enforces restrictions on package imports.
    # - exhaustruct # Checks if all structure fields are initialized.
    # - forbidigo # Forbids usage of specific identifiers.
    # - forcetypeassert # Finds forced type assertions.
    # - funlen # Reports functions that are too long.
    # - ginkgolinter # Enforces standards of using ginkgo and gomega.
    # - gocheckcompilerdirectives # Checks that go compiler directive comments (//go:) are valid.
    # - gochecknoglobals # Checks for global variables.
    # - gochecknoinits # Checks that no init functions are present in Go code.
    # - gocognit # Checks cognitive complexity of functions.
    # - gocyclo # Computes and checks the cyclomatic complexity of functions.
    # - godox # Detects FIXME, TODO, and other comment annotations.
    # - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    # - gomodguard # Allow and block list linter for direct Go module dependencies.
    # - goprintffuncname # Checks that printf-like functions are named with "f" at the end.
    # - nlreturn # Nlreturn checks for a new line before return and branch statements to increase code clarity.
    # - nolintlint # Reports ill-formed or insufficient nolint directives.
    # - perfsprint # Checks that fmt.Sprintf can be replaced with a faster alternative.
    # - wsl # Add or remove empty lines.